#!/usr/bin/env python

# this script will use whats in your clipboard to function, this is how to use it:
# if you have "https://someaccount.beta.instructure.com/courses/663 10T 10s" in your clipboard
# the script will enroll 10 teachers and 10 students into course 663 on beta
# https://someaccount.beta.instructure.com/courses/663 10T 10s 10o 10ta will enroll 10 teachers, students, observers, and tas into course 663
# order of the numbers does not matter, and they are not required so https://someaccount.beta.instructure.com/courses/663 100o will work just fine

import requests, json, uuid, time, os, datetime, xerox, re, sys
from multiprocessing import Process, Lock

prodtoken = os.getenv('sandbox_token')
localtoken = os.getenv('local_token')
portaltoken = os.getenv('portal_token')
tokenset = False

clipboard = str(xerox.paste()).split()
clipboardurl = str(clipboard[0])
clipboard.pop(0)

clipboard = ' '.join(clipboard)
teacher_count = int(re.search(r"\d*T", clipboard).group().replace('T', '')) if re.search(r"\d*T", clipboard) else 0
ta_count = int(re.search(r"\d*ta", clipboard).group().replace('ta', '')) if re.search(r"\d*ta", clipboard) else 0
student_count = int(re.search(r"\d*s", clipboard).group().replace('s', '')) if re.search(r"\d*s", clipboard) else 0
observer_count = int(re.search(r"\d*o", clipboard).group().replace('o', '')) if re.search(r"\d*o", clipboard) else 0

password = 'password' #feel free to change the password these users receive

course = re.search(r"courses/\d+", clipboardurl)
section = re.search(r"sections/\d+", clipboardurl)

if course:
    account = re.search(r"\S*(?=/courses/\d+)", clipboardurl).group()
    course = course.group().replace('courses/', '')

if section:
    account = re.search(r"\S*(?=/sections/\d+)", clipboardurl).group()
    section = section.group().replace('sections/', '')

if course or section:
    if ('192.168' in clipboardurl or 'localhost' in clipboardurl):
        token = localtoken
        tokenset = True
    if '.instructure.com' in clipboardurl:
        token = prodtoken
        tokenset = True
    if 'amazon' in clipboardurl:
        token = portaltoken
        tokenset = True
    if tokenset == False:
        sys.exit()
else:
    print("I cannot parse that url. " + clipboardurl)
    sys.exit()

def rand(string_length=7):
        random = str(uuid.uuid4())
        random = random.upper()
        random = random.replace("-","")
        return random[0:string_length]

def userenroll(number, course, enrollment_type):
    headers = {'Authorization': 'Bearer ' + token}
    snum = str(number)
    if section:
        eurl = (account + "/api/v1/sections/" + section + "/enrollments")
        newusername = enrollment_type + snum + '-' + section + '-' + uuu
    else:
        eurl = (account + "/api/v1/courses/" + course + "/enrollments")
        newusername = enrollment_type + snum + '-' + course + '-' + uuu
    newuser = {'user[name]': newusername, 'pseudonym[unique_id]': newusername, 'pseudonym[password]': password, 'pseudonym[sis_user_id]': newusername}
    url = (account + "/api/v1/accounts/1/users")
    headers = {'Authorization': 'Bearer ' + token}
    u = requests.post(url, headers=headers, data=newuser)
    if u.status_code == requests.codes.ok:
        pass
    else:
        print(u.text)
        u.raise_for_status
    ujson = u.json()
    userid = ujson[u"id"]
    user = {'enrollment[user_id]': userid, 'enrollment[type]': enrollment_type + 'Enrollment', 'enrollment[enrollment_state]': 'active', 'enrollment[notify]': 'false'}
    headers = {'Authorization': 'Bearer ' + token}
    r = requests.post(eurl, headers=headers, data=user)
    if r.status_code == requests.codes.ok:
        pass
    else:
        print(r.text)
        r.raise_for_status

def shred(amount, role, course, threads=10):
    print "Enrolling {} {}s".format(amount, role)
    if amount > 0:
        numlist = list(xrange(amount))
        while len(numlist) > 0:
            for item in numlist[:threads]:
                p = Process(target=userenroll, args=(item, course, role))
                p.start()
                numlist.remove(item)
            p.join()
            if p.is_alive() == True:
                while p.is_alive() == True:
                    time.sleep(.5)
    else:
        pass

# main block of fun
uuu = rand(7)
lock = Lock()
start = datetime.datetime.now()
shred(teacher_count, 'Teacher', course)
shred(ta_count, 'Ta', course)
shred(student_count, 'Student', course)
shred(observer_count, 'Observer', course)
end = datetime.datetime.now()
print "Time taken: {} seconds".format(str(end-start))
