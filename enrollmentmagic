#!/usr/bin/env python
import requests, json, uuid, time, os, datetime, xerox, re, sys
from multiprocessing import Process, Lock

prodtoken = 'prod token goes here'
localtoken = 'local token goes here'
portaltoken = 'portal token goes here'
tokenset = False

password = 'password' #feel free to change the password these users receive
clipboardurl = str(xerox.paste())

if re.search(r"courses/\d+", clipboardurl) is not None:
	if '192.168' in clipboardurl:
		token = localtoken
		tokenset = True
	if '.instructure.com' in clipboardurl:
		token = prodtoken
		tokenset = True
	if '.amazon.com' in clipboardurl:
		token = portaltoken
		tokenset = True
	if tokenset == False:
		sys.exit()
else:
	sys.exit()
account = re.findall(r"\S*(?=/courses/\d+)", clipboardurl)[0]
num = 10
num_2 = num
course = re.findall(r"courses/\d+", clipboardurl)[0].replace('courses/', '')

def rand(string_length=7):
		random = str(uuid.uuid4())
		random = random.upper()
		random = random.replace("-","")
		return random[0:string_length]

uuu = rand(7)
lock = Lock()

def userenroll(number, course, enrollment_type):
	headers = {'Authorization': 'Bearer ' + token}
	snum = str(number)
	newusername = 'fake' + enrollment_type + snum + '-' + course + '-' + uuu
	newuser = {'user[name]': newusername, 'pseudonym[unique_id]': newusername, 'pseudonym[password]': password, 'pseudonym[sis_user_id]': newusername}
	url = (account + "/api/v1/accounts/1/users")
	headers = {'Authorization': 'Bearer ' + token}
	u = requests.post(url, headers=headers, data=newuser)
	if u.status_code == requests.codes.ok:
		pass
	else:
		print(u.text)
		print(u.raise_for_status())
	ujson = u.json()
	userid = ujson[u"id"]
	user = {'enrollment[user_id]': userid, 'enrollment[type]': enrollment_type + 'Enrollment', 'enrollment[enrollment_state]': 'active', 'enrollment[notify]': 'false'}
	url = (account + "/api/v1/courses/" + course + "/enrollments")
	headers = {'Authorization': 'Bearer ' + token}
	r = requests.post(url, headers=headers, data=user)
	if r.status_code == requests.codes.ok:
		pass
	else:
		print r.text
		print(r.raise_for_status())
numlist = list(xrange(num))
threads = 10
print(uuu)
while len(numlist) > 0:
	for item in numlist[:threads]:
		p = Process(target=userenroll, args=(item, course, 'Student'))
		p.start()
		numlist.remove(item)
	p.join()
if p.is_alive() == True:
	while p.is_alive() == True:
		time.sleep(.5)
userenroll(1, course, "Teacher")
userenroll(2, course, 'Ta')
for i in range(2): userenroll(str(i), course, 'Observer')